#!/bin/sh
# Mat Kovach
# A shell script for opionated docker operations using literate 
# programming for docker definitions
set -eu

BASE_DIR=${DOCKER_BASE_DIR-"$HOME/git/dockerbucket"}
TANGLE_SCRIPT="$HOME/bin/tangle.tcl"
TARGET_PLATFORM=${DOCKER_PLATFORM-"linux/amd64"}

Err() {
    echo "Error: $@" 1>&2
}

Fail() {
    Err "$@"
    exit 1
}

usage() {
    cat << __USAGE
Usage: $0 [OPTIONS] CMD [DOCKER ARGUMENTS]
    echo
OPTIONS:
  -h,  --help           Show this help message
  -b,  --basedir DIR    Set the base directory (default: $HOME/git/dockerbucket)
  -l,  --list           List available container definitions
  -dl, --imagelist      List Docker images created by this script
  -c,  --container      Specify the container to run

COMMANDS:
  build                Build the Docker image
  run                  Run the Docker container
  edit                 Edit the container markdown file
  buildrun             Build and run the Docker container

ENVIRONMENT VARIABLES:
  DOCKER_BASE_DIR      Directory for Docker definitions (default: $HOME/git/dockerbucket)
  DOCKER_PLATFORM      Docker platform (default: linux/amd64)
__USAGE
    exit 1
}

generate_dockerfile() {
    local dockerfile_content
    dockerfile_content=$(${TANGLE_SCRIPT} -R "${container}.dockerfile" "${DOC}")
    [ $? -eq 0 ] || Fail "Failed to generate Dockerfile from ${DOC}"
    echo "$dockerfile_content"
}

op_build() {
    cd "${BASE_DIR}" || Fail "Failed to change directory to ${BASE_DIR}"
    generate_dockerfile \
      | docker build --platform=${TARGET_PLATFORM} -t ${DOCKER_IMAGE} . -f -
}

op_run() {
    CMD="$@"
    docker run --rm -it \
        -v "$HOME/work:/data" \
        -e DISPLAY=host.docker.internal:0 \
        --platform="${TARGET_PLATFORM}" \
        "${DOCKER_IMAGE}" $CMD
}

check_for_doc() {
    if [ ! -f "${DOC}" ]; then
        Err "Could not find ${DOC}, exiting"
        usage
    fi
}

container=""
EDITOR=${EDITOR:-vi}

[ $# -lt 1 ] && usage

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h|-\?) usage ;;
        -b|--basedir) shift; BASE_DIR="$1"; shift ;;
        -l|-ls|--list)
            ls "${BASE_DIR}"/*.md | grep -v README.md | sed -ne 's/.*\/\(.*\)\.md$/\1/p'
            exit 0
            ;;
        -dl|--imagelist)
            docker image ls | awk '$2 == "my-docker" {print}'
            exit 0
            ;;
        -c|--container) shift; container="$1"; shift ;;
        --) shift; break ;;
        -*) Err "bad option: $1"; usage ;;
        *) break ;;
    esac
done

[ -z "${container}" ] && Fail "no container given, exiting"

DOC="${BASE_DIR}/${container}.md"
DOCKER_IMAGE="${container}:my-docker"

op=$1; shift

case "$op" in
    build) check_for_doc; op_build ;;
    run) shift; check_for_doc; op_run "$@" ;;
    edit) exec "$EDITOR" "${DOC}" ;;
    buildrun)
        check_for_doc
        op_build
        shift;
        op_run "$@" 
        ;;
    *) Err "illegal option $op, exiting"; usage ;;
esac

exit 0
